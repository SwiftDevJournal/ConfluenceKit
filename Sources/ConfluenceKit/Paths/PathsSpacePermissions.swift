// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var spacePermissions: SpacePermissions {
        SpacePermissions(path: "/space-permissions")
    }

    public struct SpacePermissions {
        /// Path: `/space-permissions`
        public let path: String

        /// Get available space permissions
        ///
        /// Retrieves the available space permissions.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to access the Confluence site.
        public func get(cursor: String? = nil, limit: Int32? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(cursor, limit), id: "getAvailableSpacePermissions")
        }

        /// MultiEntityResult<SpacePermission>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.SpacePermission]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.SpacePermission]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.SpacePermission].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        private func makeGetQuery(_ cursor: String?, _ limit: Int32?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(cursor, forKey: "cursor")
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }
    }
}
