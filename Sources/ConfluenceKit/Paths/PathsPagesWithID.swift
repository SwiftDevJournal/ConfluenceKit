// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Pages {
    public func id(_ id: Int) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/pages/{id}`
        public let path: String

        /// Get page by id
        ///
        /// Returns a specific page.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the page and its corresponding space.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getPageById")
        }

        public struct GetResponse: Decodable {
            /// ID of the page.
            public var id: String?
            /// The status of the content.
            public var status: ConfluenceKit.ContentStatus?
            /// Title of the page.
            public var title: String?
            /// ID of the space the page is in.
            public var spaceID: String?
            /// ID of the parent page, or null if there is no parent page.
            public var parentID: String?
            /// Content type of the parent, or null if there is no parent.
            public var parentType: ConfluenceKit.ParentContentType?
            /// Position of child page within the given parent page tree.
            public var position: Int32?
            /// The account ID of the user who created this page originally.
            public var authorID: String?
            /// The account ID of the user who owns this page.
            public var ownerID: String?
            /// The account ID of the user who owned this page previously, or null if there is no previous owner.
            public var lastOwnerID: String?
            /// Date and time when the page was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            public var version: ConfluenceKit.Version?
            /// Contains fields for each representation type requested.
            public var body: ConfluenceKit.BodySingle?
            public var labels: Labels?
            public var properties: Properties?
            public var operations: Operations?
            public var likes: Likes?
            public var versions: Versions?
            /// Whether the page has been favorited by the current user.
            public var isFavoritedByCurrentUser: Bool?
            public var links: ConfluenceKit.AbstractPageLinks?

            public struct Labels: Decodable {
                public var results: [ConfluenceKit.Label]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Label]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Label].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Properties: Decodable {
                public var results: [ConfluenceKit.ContentProperty]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.ContentProperty]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.ContentProperty].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Operations: Decodable {
                public var results: [ConfluenceKit.Operation]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Operation]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Operation].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Likes: Decodable {
                public var results: [ConfluenceKit.Like]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Like]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Like].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Versions: Decodable {
                public var results: [ConfluenceKit.Version]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Version]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Version].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public init(id: String? = nil, status: ConfluenceKit.ContentStatus? = nil, title: String? = nil, spaceID: String? = nil, parentID: String? = nil, parentType: ConfluenceKit.ParentContentType? = nil, position: Int32? = nil, authorID: String? = nil, ownerID: String? = nil, lastOwnerID: String? = nil, createdAt: Date? = nil, version: ConfluenceKit.Version? = nil, body: ConfluenceKit.BodySingle? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, likes: Likes? = nil, versions: Versions? = nil, isFavoritedByCurrentUser: Bool? = nil, links: ConfluenceKit.AbstractPageLinks? = nil) {
                self.id = id
                self.status = status
                self.title = title
                self.spaceID = spaceID
                self.parentID = parentID
                self.parentType = parentType
                self.position = position
                self.authorID = authorID
                self.ownerID = ownerID
                self.lastOwnerID = lastOwnerID
                self.createdAt = createdAt
                self.version = version
                self.body = body
                self.labels = labels
                self.properties = properties
                self.operations = operations
                self.likes = likes
                self.versions = versions
                self.isFavoritedByCurrentUser = isFavoritedByCurrentUser
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.status = try values.decodeIfPresent(ConfluenceKit.ContentStatus.self, forKey: "status")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
                self.parentID = try values.decodeIfPresent(String.self, forKey: "parentId")
                self.parentType = try values.decodeIfPresent(ConfluenceKit.ParentContentType.self, forKey: "parentType")
                self.position = try values.decodeIfPresent(Int32.self, forKey: "position")
                self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
                self.ownerID = try values.decodeIfPresent(String.self, forKey: "ownerId")
                self.lastOwnerID = try values.decodeIfPresent(String.self, forKey: "lastOwnerId")
                self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
                self.version = try values.decodeIfPresent(ConfluenceKit.Version.self, forKey: "version")
                self.body = try values.decodeIfPresent(ConfluenceKit.BodySingle.self, forKey: "body")
                self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
                self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
                self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
                self.likes = try values.decodeIfPresent(Likes.self, forKey: "likes")
                self.versions = try values.decodeIfPresent(Versions.self, forKey: "versions")
                self.isFavoritedByCurrentUser = try values.decodeIfPresent(Bool.self, forKey: "isFavoritedByCurrentUser")
                self.links = try values.decodeIfPresent(ConfluenceKit.AbstractPageLinks.self, forKey: "_links")
            }
        }

        public struct GetParameters {
            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public var bodyFormat: BodyFormat?
            public var isGetDraft: Bool?
            public var status: [Status]?
            public var version: Int?
            public var isIncludeLabels: Bool?
            public var isIncludeProperties: Bool?
            public var isIncludeOperations: Bool?
            public var isIncludeLikes: Bool?
            public var isIncludeVersions: Bool?
            public var isIncludeVersion: Bool?
            public var isIncludeFavoritedByCurrentUserStatus: Bool?

            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public enum BodyFormat: String, Codable, CaseIterable {
                case storage
                case atlasDocFormat = "atlas_doc_format"
                case view
                case exportView = "export_view"
                case anonymousExportView = "anonymous_export_view"
                case styledView = "styled_view"
                case editor
            }

            public enum Status: String, Codable, CaseIterable {
                case current
                case archived
                case trashed
                case deleted
                case historical
                case draft
            }

            public init(bodyFormat: BodyFormat? = nil, isGetDraft: Bool? = nil, status: [Status]? = nil, version: Int? = nil, isIncludeLabels: Bool? = nil, isIncludeProperties: Bool? = nil, isIncludeOperations: Bool? = nil, isIncludeLikes: Bool? = nil, isIncludeVersions: Bool? = nil, isIncludeVersion: Bool? = nil, isIncludeFavoritedByCurrentUserStatus: Bool? = nil) {
                self.bodyFormat = bodyFormat
                self.isGetDraft = isGetDraft
                self.status = status
                self.version = version
                self.isIncludeLabels = isIncludeLabels
                self.isIncludeProperties = isIncludeProperties
                self.isIncludeOperations = isIncludeOperations
                self.isIncludeLikes = isIncludeLikes
                self.isIncludeVersions = isIncludeVersions
                self.isIncludeVersion = isIncludeVersion
                self.isIncludeFavoritedByCurrentUserStatus = isIncludeFavoritedByCurrentUserStatus
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(bodyFormat, forKey: "body-format")
                encoder.encode(isGetDraft, forKey: "get-draft")
                encoder.encode(status, forKey: "status")
                encoder.encode(version, forKey: "version")
                encoder.encode(isIncludeLabels, forKey: "include-labels")
                encoder.encode(isIncludeProperties, forKey: "include-properties")
                encoder.encode(isIncludeOperations, forKey: "include-operations")
                encoder.encode(isIncludeLikes, forKey: "include-likes")
                encoder.encode(isIncludeVersions, forKey: "include-versions")
                encoder.encode(isIncludeVersion, forKey: "include-version")
                encoder.encode(isIncludeFavoritedByCurrentUserStatus, forKey: "include-favorited-by-current-user-status")
                return encoder.items
            }
        }

        /// Update page
        ///
        /// Update a page by id.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the page and its corresponding space. Permission to update pages in the space.
        public func put(_ body: PutRequest) -> Request<PutResponse> {
            Request(path: path, method: "PUT", body: body, id: "updatePage")
        }

        public struct PutResponse: Decodable {
            /// ID of the page.
            public var id: String?
            /// The status of the content.
            public var status: ConfluenceKit.ContentStatus?
            /// Title of the page.
            public var title: String?
            /// ID of the space the page is in.
            public var spaceID: String?
            /// ID of the parent page, or null if there is no parent page.
            public var parentID: String?
            /// Content type of the parent, or null if there is no parent.
            public var parentType: ConfluenceKit.ParentContentType?
            /// Position of child page within the given parent page tree.
            public var position: Int32?
            /// The account ID of the user who created this page originally.
            public var authorID: String?
            /// The account ID of the user who owns this page.
            public var ownerID: String?
            /// The account ID of the user who owned this page previously, or null if there is no previous owner.
            public var lastOwnerID: String?
            /// Date and time when the page was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            public var version: ConfluenceKit.Version?
            /// Contains fields for each representation type requested.
            public var body: ConfluenceKit.BodySingle?
            public var labels: Labels?
            public var properties: Properties?
            public var operations: Operations?
            public var likes: Likes?
            public var versions: Versions?
            /// Whether the page has been favorited by the current user.
            public var isFavoritedByCurrentUser: Bool?
            public var links: ConfluenceKit.AbstractPageLinks?

            public struct Labels: Decodable {
                public var results: [ConfluenceKit.Label]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Label]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Label].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Properties: Decodable {
                public var results: [ConfluenceKit.ContentProperty]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.ContentProperty]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.ContentProperty].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Operations: Decodable {
                public var results: [ConfluenceKit.Operation]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Operation]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Operation].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Likes: Decodable {
                public var results: [ConfluenceKit.Like]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Like]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Like].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Versions: Decodable {
                public var results: [ConfluenceKit.Version]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Version]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Version].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public init(id: String? = nil, status: ConfluenceKit.ContentStatus? = nil, title: String? = nil, spaceID: String? = nil, parentID: String? = nil, parentType: ConfluenceKit.ParentContentType? = nil, position: Int32? = nil, authorID: String? = nil, ownerID: String? = nil, lastOwnerID: String? = nil, createdAt: Date? = nil, version: ConfluenceKit.Version? = nil, body: ConfluenceKit.BodySingle? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, likes: Likes? = nil, versions: Versions? = nil, isFavoritedByCurrentUser: Bool? = nil, links: ConfluenceKit.AbstractPageLinks? = nil) {
                self.id = id
                self.status = status
                self.title = title
                self.spaceID = spaceID
                self.parentID = parentID
                self.parentType = parentType
                self.position = position
                self.authorID = authorID
                self.ownerID = ownerID
                self.lastOwnerID = lastOwnerID
                self.createdAt = createdAt
                self.version = version
                self.body = body
                self.labels = labels
                self.properties = properties
                self.operations = operations
                self.likes = likes
                self.versions = versions
                self.isFavoritedByCurrentUser = isFavoritedByCurrentUser
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.status = try values.decodeIfPresent(ConfluenceKit.ContentStatus.self, forKey: "status")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
                self.parentID = try values.decodeIfPresent(String.self, forKey: "parentId")
                self.parentType = try values.decodeIfPresent(ConfluenceKit.ParentContentType.self, forKey: "parentType")
                self.position = try values.decodeIfPresent(Int32.self, forKey: "position")
                self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
                self.ownerID = try values.decodeIfPresent(String.self, forKey: "ownerId")
                self.lastOwnerID = try values.decodeIfPresent(String.self, forKey: "lastOwnerId")
                self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
                self.version = try values.decodeIfPresent(ConfluenceKit.Version.self, forKey: "version")
                self.body = try values.decodeIfPresent(ConfluenceKit.BodySingle.self, forKey: "body")
                self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
                self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
                self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
                self.likes = try values.decodeIfPresent(Likes.self, forKey: "likes")
                self.versions = try values.decodeIfPresent(Versions.self, forKey: "versions")
                self.isFavoritedByCurrentUser = try values.decodeIfPresent(Bool.self, forKey: "isFavoritedByCurrentUser")
                self.links = try values.decodeIfPresent(ConfluenceKit.AbstractPageLinks.self, forKey: "_links")
            }
        }

        public struct PutRequest: Encodable {
            /// Id of the page.
            public var id: String
            /// The updated status of the page.
            /// 
            /// Note, if you change the status of a page from 'current' to 'draft' and it has an existing draft, the existing draft will be deleted in favor of the updated draft.
            /// Additionally, this endpoint can be used to restore a 'trashed' or 'deleted' page to 'current' status. For restoration, page contents will not be updated and only the page status will be changed.
            public var status: Status
            /// Title of the page.
            public var title: String
            /// ID of the containing space.
            /// 
            /// This currently **does not support moving the page to a different space**.
            public var spaceID: AnyJSON?
            /// ID of the parent page.
            /// 
            /// This allows the page to be moved under a different parent within the same space.
            public var parentID: AnyJSON?
            /// Account ID of the page owner.
            /// 
            /// This allows page ownership to be transferred to another user.
            public var ownerID: AnyJSON?
            public var body: Body
            public var version: Version

            /// The updated status of the page.
            /// 
            /// Note, if you change the status of a page from 'current' to 'draft' and it has an existing draft, the existing draft will be deleted in favor of the updated draft.
            /// Additionally, this endpoint can be used to restore a 'trashed' or 'deleted' page to 'current' status. For restoration, page contents will not be updated and only the page status will be changed.
            public enum Status: String, Codable, CaseIterable {
                case current
                case draft
            }

            public enum Body: Encodable {
                case pageBodyWrite(ConfluenceKit.PageBodyWrite)
                case pageNestedBodyWrite(ConfluenceKit.PageNestedBodyWrite)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .pageBodyWrite(let value): try container.encode(value)
                    case .pageNestedBodyWrite(let value): try container.encode(value)
                    }
                }
            }

            public struct Version: Encodable {
                /// The new version of the updated page. 
                /// Set this to the current version number plus one, unless you are updating the status to 'draft' which requires a version number of 1.
                /// 
                /// If you don't know the current version number, use Get page by id.
                public var number: Int32?
                /// An optional message to be stored with the version.
                public var message: String?

                public init(number: Int32? = nil, message: String? = nil) {
                    self.number = number
                    self.message = message
                }

                public func encode(to encoder: Encoder) throws {
                    var values = encoder.container(keyedBy: StringCodingKey.self)
                    try values.encodeIfPresent(number, forKey: "number")
                    try values.encodeIfPresent(message, forKey: "message")
                }
            }

            public init(id: String, status: Status, title: String, spaceID: AnyJSON? = nil, parentID: AnyJSON? = nil, ownerID: AnyJSON? = nil, body: Body, version: Version) {
                self.id = id
                self.status = status
                self.title = title
                self.spaceID = spaceID
                self.parentID = parentID
                self.ownerID = ownerID
                self.body = body
                self.version = version
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(id, forKey: "id")
                try values.encode(status, forKey: "status")
                try values.encode(title, forKey: "title")
                try values.encodeIfPresent(spaceID, forKey: "spaceId")
                try values.encodeIfPresent(parentID, forKey: "parentId")
                try values.encodeIfPresent(ownerID, forKey: "ownerId")
                try values.encode(body, forKey: "body")
                try values.encode(version, forKey: "version")
            }
        }

        /// Delete page
        ///
        /// Delete a page by id.
        /// 
        /// By default this will delete pages that are non-drafts. To delete a page that is a draft, the endpoint must be called on a 
        /// draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.
        /// 
        /// Deleting a page moves the page to the trash, where it can be restored later. To permanently delete a page (or "purge" it),
        /// the endpoint must be called on a **trashed** page with the following param `purge=true`.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the page and its corresponding space.
        /// Permission to delete pages in the space.
        /// Permission to administer the space (if attempting to purge).
        public func delete(isPurge: Bool? = nil, isDraft: Bool? = nil) -> Request<Void> {
            Request(path: path, method: "DELETE", query: makeDeleteQuery(isPurge, isDraft), id: "deletePage")
        }

        private func makeDeleteQuery(_ isPurge: Bool?, _ isDraft: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isPurge, forKey: "purge")
            encoder.encode(isDraft, forKey: "draft")
            return encoder.items
        }
    }
}
