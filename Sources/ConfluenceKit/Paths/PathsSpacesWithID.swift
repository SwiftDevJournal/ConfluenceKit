// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Spaces {
    public func id(_ id: Int) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/spaces/{id}`
        public let path: String

        /// Get space by id
        ///
        /// Returns a specific space.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the space.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getSpaceById")
        }

        public struct GetResponse: Decodable {
            /// ID of the space.
            public var id: String?
            /// Key of the space.
            public var key: String?
            /// Name of the space.
            public var name: String?
            /// The type of space.
            public var type: ConfluenceKit.SpaceType?
            /// The status of the space.
            public var status: ConfluenceKit.SpaceStatus?
            /// The account ID of the user who created this space originally.
            public var authorID: String?
            /// Date and time when the space was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            /// ID of the space's homepage.
            public var homepageID: String?
            /// Contains fields for each representation type requested.
            public var description: ConfluenceKit.SpaceDescription?
            /// The icon of the space
            public var icon: ConfluenceKit.SpaceIcon?
            public var labels: Labels?
            public var properties: Properties?
            public var operations: Operations?
            public var permissions: Permissions?
            public var links: ConfluenceKit.SpaceLinks?

            public struct Labels: Decodable {
                public var results: [ConfluenceKit.Label]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Label]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Label].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Properties: Decodable {
                public var results: [ConfluenceKit.SpaceProperty]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.SpaceProperty]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.SpaceProperty].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Operations: Decodable {
                public var results: [ConfluenceKit.Operation]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Operation]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Operation].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Permissions: Decodable {
                public var results: [ConfluenceKit.SpacePermissionAssignment]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.SpacePermissionAssignment]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.SpacePermissionAssignment].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public init(id: String? = nil, key: String? = nil, name: String? = nil, type: ConfluenceKit.SpaceType? = nil, status: ConfluenceKit.SpaceStatus? = nil, authorID: String? = nil, createdAt: Date? = nil, homepageID: String? = nil, description: ConfluenceKit.SpaceDescription? = nil, icon: ConfluenceKit.SpaceIcon? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, permissions: Permissions? = nil, links: ConfluenceKit.SpaceLinks? = nil) {
                self.id = id
                self.key = key
                self.name = name
                self.type = type
                self.status = status
                self.authorID = authorID
                self.createdAt = createdAt
                self.homepageID = homepageID
                self.description = description
                self.icon = icon
                self.labels = labels
                self.properties = properties
                self.operations = operations
                self.permissions = permissions
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.key = try values.decodeIfPresent(String.self, forKey: "key")
                self.name = try values.decodeIfPresent(String.self, forKey: "name")
                self.type = try values.decodeIfPresent(ConfluenceKit.SpaceType.self, forKey: "type")
                self.status = try values.decodeIfPresent(ConfluenceKit.SpaceStatus.self, forKey: "status")
                self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
                self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
                self.homepageID = try values.decodeIfPresent(String.self, forKey: "homepageId")
                self.description = try values.decodeIfPresent(ConfluenceKit.SpaceDescription.self, forKey: "description")
                self.icon = try values.decodeIfPresent(ConfluenceKit.SpaceIcon.self, forKey: "icon")
                self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
                self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
                self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
                self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
                self.links = try values.decodeIfPresent(ConfluenceKit.SpaceLinks.self, forKey: "_links")
            }
        }

        public struct GetParameters {
            /// The formats a space description can be represented as. A subset of BodyRepresentation.
            public var descriptionFormat: DescriptionFormat?
            public var isIncludeIcon: Bool?
            public var isIncludeOperations: Bool?
            public var isIncludeProperties: Bool?
            public var isIncludePermissions: Bool?
            public var isIncludeRoleAssignments: Bool?
            public var isIncludeLabels: Bool?

            /// The formats a space description can be represented as. A subset of BodyRepresentation.
            public enum DescriptionFormat: String, Codable, CaseIterable {
                case plain
                case view
            }

            public init(descriptionFormat: DescriptionFormat? = nil, isIncludeIcon: Bool? = nil, isIncludeOperations: Bool? = nil, isIncludeProperties: Bool? = nil, isIncludePermissions: Bool? = nil, isIncludeRoleAssignments: Bool? = nil, isIncludeLabels: Bool? = nil) {
                self.descriptionFormat = descriptionFormat
                self.isIncludeIcon = isIncludeIcon
                self.isIncludeOperations = isIncludeOperations
                self.isIncludeProperties = isIncludeProperties
                self.isIncludePermissions = isIncludePermissions
                self.isIncludeRoleAssignments = isIncludeRoleAssignments
                self.isIncludeLabels = isIncludeLabels
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(descriptionFormat, forKey: "description-format")
                encoder.encode(isIncludeIcon, forKey: "include-icon")
                encoder.encode(isIncludeOperations, forKey: "include-operations")
                encoder.encode(isIncludeProperties, forKey: "include-properties")
                encoder.encode(isIncludePermissions, forKey: "include-permissions")
                encoder.encode(isIncludeRoleAssignments, forKey: "include-role-assignments")
                encoder.encode(isIncludeLabels, forKey: "include-labels")
                return encoder.items
            }
        }
    }
}
