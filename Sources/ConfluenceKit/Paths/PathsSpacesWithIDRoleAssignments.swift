// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Spaces.WithID {
    public var roleAssignments: RoleAssignments {
        RoleAssignments(path: path + "/role-assignments")
    }

    public struct RoleAssignments {
        /// Path: `/spaces/{id}/role-assignments`
        public let path: String

        /// Get space role assignments
        ///
        /// Retrieves the space role assignments.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the space.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getSpaceRoleAssignments")
        }

        /// MultiEntityResult<SpaceRoleAssignment>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.SpaceRoleAssignment]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.SpaceRoleAssignment]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.SpaceRoleAssignment].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        public struct GetParameters {
            public var roleID: String?
            public var roleType: String?
            public var principalID: String?
            /// The principal type.
            public var principalType: PrincipalType?
            public var cursor: String?
            public var limit: Int32?

            /// The principal type.
            public enum PrincipalType: String, Codable, CaseIterable {
                case user = "USER"
                case group = "GROUP"
                case accessClass = "ACCESS_CLASS"
            }

            public init(roleID: String? = nil, roleType: String? = nil, principalID: String? = nil, principalType: PrincipalType? = nil, cursor: String? = nil, limit: Int32? = nil) {
                self.roleID = roleID
                self.roleType = roleType
                self.principalID = principalID
                self.principalType = principalType
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(roleID, forKey: "role-id")
                encoder.encode(roleType, forKey: "role-type")
                encoder.encode(principalID, forKey: "principal-id")
                encoder.encode(principalType, forKey: "principal-type")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Set space role assignments
        ///
        /// Sets space role assignments as specified in the payload.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to manage roles in the space.
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            Request(path: path, method: "POST", body: body, id: "setSpaceRoleAssignments")
        }

        /// MultiEntityResult<SpaceRoleAssignment>
        public struct PostResponse: Decodable {
            public var results: [ConfluenceKit.SpaceRoleAssignment]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.SpaceRoleAssignment]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.SpaceRoleAssignment].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        public struct PostRequest: Encodable {
            /// The principal of the role assignment.
            public var principal: ConfluenceKit.Principal
            /// The role to which the principal is assigned.
            public var roleID: String?

            public init(principal: ConfluenceKit.Principal, roleID: String? = nil) {
                self.principal = principal
                self.roleID = roleID
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(principal, forKey: "principal")
                try values.encodeIfPresent(roleID, forKey: "roleId")
            }
        }
    }
}
