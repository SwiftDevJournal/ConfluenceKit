// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var customContent: CustomContent {
        CustomContent(path: "/custom-content")
    }

    public struct CustomContent {
        /// Path: `/custom-content`
        public let path: String

        /// Get custom content by type
        ///
        /// Returns all custom content for a given type. The number of results is limited by the `limit` parameter and additional results (if available)
        /// will be available through the `next` URL present in the `Link` response header.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters.asQuery, id: "getCustomContentByType")
        }

        /// MultiEntityResult<CustomContent>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.CustomContentBulk]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.CustomContentBulk]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.CustomContentBulk].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        public enum GetResponseHeaders {
            /// This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel="next" would be the URL necessary to get the next page of information. Example response header format: `Link: </wiki/api/v2/custom-content?cursor=<opaque cursor token>>; rel="next", <https://site.atlassian.net/wiki>; rel="base"`
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var type: String
            public var id: [Int64]?
            public var spaceID: [Int64]?
            /// The sort fields for custom content. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
            public var sort: Sort?
            public var cursor: String?
            public var limit: Int32?
            /// The formats a custom content body can be represented as. A subset of BodyRepresentation.
            public var bodyFormat: BodyFormat?

            /// The sort fields for custom content. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
            public enum Sort: String, Codable, CaseIterable {
                case id
                case minusid = "-id"
                case createdDate = "created-date"
                case minuscreatedDate = "-created-date"
                case modifiedDate = "modified-date"
                case minusmodifiedDate = "-modified-date"
                case title
                case minustitle = "-title"
            }

            /// The formats a custom content body can be represented as. A subset of BodyRepresentation.
            public enum BodyFormat: String, Codable, CaseIterable {
                case raw
                case storage
                case atlasDocFormat = "atlas_doc_format"
            }

            public init(type: String, id: [Int64]? = nil, spaceID: [Int64]? = nil, sort: Sort? = nil, cursor: String? = nil, limit: Int32? = nil, bodyFormat: BodyFormat? = nil) {
                self.type = type
                self.id = id
                self.spaceID = spaceID
                self.sort = sort
                self.cursor = cursor
                self.limit = limit
                self.bodyFormat = bodyFormat
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(type, forKey: "type")
                encoder.encode(id, forKey: "id")
                encoder.encode(spaceID, forKey: "space-id")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(bodyFormat, forKey: "body-format")
                return encoder.items
            }
        }

        /// Create custom content
        ///
        /// Creates a new custom content in the given space, page, blogpost or other custom content.
        /// 
        /// Only one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is required in the request body.
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the content of the page or blogpost and its corresponding space. Permission to create custom content in the space.
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            Request(path: path, method: "POST", body: body, id: "createCustomContent")
        }

        public struct PostResponse: Decodable {
            /// ID of the custom content.
            public var id: String?
            /// The type of custom content.
            public var type: String?
            /// The status of the content.
            public var status: ConfluenceKit.ContentStatus?
            /// Title of the custom content.
            public var title: String?
            /// ID of the space the custom content is in.
            /// 
            /// Note: This is always returned, regardless of if the custom content has a container that is a space.
            public var spaceID: String?
            /// ID of the containing page.
            /// 
            /// Note: This is only returned if the custom content has a container that is a page.
            public var pageID: String?
            /// ID of the containing blog post.
            /// 
            /// Note: This is only returned if the custom content has a container that is a blog post.
            public var blogPostID: String?
            /// ID of the containing custom content.
            /// 
            /// Note: This is only returned if the custom content has a container that is custom content.
            public var customContentID: String?
            /// The account ID of the user who created this custom content originally.
            public var authorID: String?
            /// Date and time when the custom content was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            public var version: ConfluenceKit.Version?
            public var labels: Labels?
            public var properties: Properties?
            public var operations: Operations?
            public var versions: Versions?
            /// Contains fields for each representation type requested.
            public var body: ConfluenceKit.CustomContentBodySingle?
            public var links: ConfluenceKit.CustomContentLinks?

            public struct Labels: Decodable {
                public var results: [ConfluenceKit.Label]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Label]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Label].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Properties: Decodable {
                public var results: [ConfluenceKit.ContentProperty]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.ContentProperty]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.ContentProperty].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Operations: Decodable {
                public var results: [ConfluenceKit.Operation]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Operation]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Operation].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Versions: Decodable {
                public var results: [ConfluenceKit.Version]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Version]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Version].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public init(id: String? = nil, type: String? = nil, status: ConfluenceKit.ContentStatus? = nil, title: String? = nil, spaceID: String? = nil, pageID: String? = nil, blogPostID: String? = nil, customContentID: String? = nil, authorID: String? = nil, createdAt: Date? = nil, version: ConfluenceKit.Version? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, versions: Versions? = nil, body: ConfluenceKit.CustomContentBodySingle? = nil, links: ConfluenceKit.CustomContentLinks? = nil) {
                self.id = id
                self.type = type
                self.status = status
                self.title = title
                self.spaceID = spaceID
                self.pageID = pageID
                self.blogPostID = blogPostID
                self.customContentID = customContentID
                self.authorID = authorID
                self.createdAt = createdAt
                self.version = version
                self.labels = labels
                self.properties = properties
                self.operations = operations
                self.versions = versions
                self.body = body
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.type = try values.decodeIfPresent(String.self, forKey: "type")
                self.status = try values.decodeIfPresent(ConfluenceKit.ContentStatus.self, forKey: "status")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
                self.pageID = try values.decodeIfPresent(String.self, forKey: "pageId")
                self.blogPostID = try values.decodeIfPresent(String.self, forKey: "blogPostId")
                self.customContentID = try values.decodeIfPresent(String.self, forKey: "customContentId")
                self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
                self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
                self.version = try values.decodeIfPresent(ConfluenceKit.Version.self, forKey: "version")
                self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
                self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
                self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
                self.versions = try values.decodeIfPresent(Versions.self, forKey: "versions")
                self.body = try values.decodeIfPresent(ConfluenceKit.CustomContentBodySingle.self, forKey: "body")
                self.links = try values.decodeIfPresent(ConfluenceKit.CustomContentLinks.self, forKey: "_links")
            }
        }

        public enum PostResponseHeaders {
            /// Relative link to created custom content Example response header format: `location: </wiki/api/v2/custom-content/<id>>`
            public static let location = HTTPHeader<String>(field: "location")
        }

        public struct PostRequest: Encodable {
            /// Type of custom content.
            public var type: String
            /// The status of the custom content.
            public var status: Status?
            /// ID of the containing space.
            public var spaceID: String?
            /// ID of the containing page.
            public var pageID: String?
            /// ID of the containing Blog Post.
            public var blogPostID: String?
            /// ID of the containing custom content.
            public var customContentID: String?
            /// Title of the custom content.
            public var title: String
            public var body: Body

            /// The status of the custom content.
            public enum Status: String, Codable, CaseIterable {
                case current
            }

            public enum Body: Encodable {
                case customContentBodyWrite(ConfluenceKit.CustomContentBodyWrite)
                case customContentNestedBodyWrite(ConfluenceKit.CustomContentNestedBodyWrite)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .customContentBodyWrite(let value): try container.encode(value)
                    case .customContentNestedBodyWrite(let value): try container.encode(value)
                    }
                }
            }

            public init(type: String, status: Status? = nil, spaceID: String? = nil, pageID: String? = nil, blogPostID: String? = nil, customContentID: String? = nil, title: String, body: Body) {
                self.type = type
                self.status = status
                self.spaceID = spaceID
                self.pageID = pageID
                self.blogPostID = blogPostID
                self.customContentID = customContentID
                self.title = title
                self.body = body
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(type, forKey: "type")
                try values.encodeIfPresent(status, forKey: "status")
                try values.encodeIfPresent(spaceID, forKey: "spaceId")
                try values.encodeIfPresent(pageID, forKey: "pageId")
                try values.encodeIfPresent(blogPostID, forKey: "blogPostId")
                try values.encodeIfPresent(customContentID, forKey: "customContentId")
                try values.encode(title, forKey: "title")
                try values.encode(body, forKey: "body")
            }
        }
    }
}
