// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Databases.WithID {
    public var ancestors: Ancestors {
        Ancestors(path: path + "/ancestors")
    }

    public struct Ancestors {
        /// Path: `/databases/{id}/ancestors`
        public let path: String

        /// Get all ancestors of database
        ///
        /// Returns all ancestors for a given database by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// 
        /// This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// as [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get).
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to access the Confluence site ('Can use' global permission).
        /// Permission to view the database and its corresponding space
        public func get(limit: Int32? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: makeGetQuery(limit), id: "getDatabaseAncestors")
        }

        /// MultiEntityResult<Ancestor>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.Ancestor]?

            public init(results: [ConfluenceKit.Ancestor]? = nil) {
                self.results = results
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.Ancestor].self, forKey: "results")
            }
        }

        private func makeGetQuery(_ limit: Int32?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }
    }
}
