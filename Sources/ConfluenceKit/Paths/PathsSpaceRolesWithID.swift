// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.SpaceRoles {
    public func id(_ id: Int) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/space-roles/{id}`
        public let path: String

        /// Get space role by ID
        ///
        /// Retrieves the space role by ID.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to access the Confluence site.
        public var get: Request<GetResponse> {
            Request(path: path, method: "GET", id: "getSpaceRolesById")
        }

        public struct GetResponse: Decodable {
            /// The identifier for the space role.
            public var id: String?
            /// The role type.
            public var type: ConfluenceKit.RoleType?
            /// The display name for the space role.
            public var displayName: String?
            /// The description for the space roleâ€™s usage.
            public var description: String?
            /// The space permissions the space role is comprised of.
            public var spacePermissions: [String]?
            public var links: Links?

            public struct Links: Decodable {
                /// Base url of the Confluence site.
                public var base: String?

                public init(base: String? = nil) {
                    self.base = base
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.base = try values.decodeIfPresent(String.self, forKey: "base")
                }
            }

            public init(id: String? = nil, type: ConfluenceKit.RoleType? = nil, displayName: String? = nil, description: String? = nil, spacePermissions: [String]? = nil, links: Links? = nil) {
                self.id = id
                self.type = type
                self.displayName = displayName
                self.description = description
                self.spacePermissions = spacePermissions
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.type = try values.decodeIfPresent(ConfluenceKit.RoleType.self, forKey: "type")
                self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
                self.description = try values.decodeIfPresent(String.self, forKey: "description")
                self.spacePermissions = try values.decodeIfPresent([String].self, forKey: "spacePermissions")
                self.links = try values.decodeIfPresent(Links.self, forKey: "_links")
            }
        }
    }
}
