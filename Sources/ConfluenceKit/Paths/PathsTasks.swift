// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var tasks: Tasks {
        Tasks(path: "/tasks")
    }

    public struct Tasks {
        /// Path: `/tasks`
        public let path: String

        /// Get tasks
        ///
        /// Returns all tasks. The number of results is limited by the `limit` parameter and additional results (if available)
        /// will be available through the `next` URL present in the `Link` response header.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to access the Confluence site ('Can use' global permission).
        /// Only tasks that the user has permission to view will be returned.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getTasks")
        }

        /// MultiEntityResult<Task>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.Task]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.Task]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.Task].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        public enum GetResponseHeaders {
            /// This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel="next" would be the URL necessary to get the next page of information. Example response header format: `Link: </wiki/api/v2/tasks?cursor=<opaque cursor token>>; rel="next", <https://site.atlassian.net/wiki>; rel="base"`
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public var bodyFormat: BodyFormat?
            public var isIncludeBlankTasks: Bool?
            public var status: Status?
            public var taskID: [Int64]?
            public var spaceID: [Int64]?
            public var pageID: [Int64]?
            public var blogpostID: [Int64]?
            public var createdBy: [String]?
            public var assignedTo: [String]?
            public var completedBy: [String]?
            public var createdAtFrom: Int64?
            public var createdAtTo: Int64?
            public var dueAtFrom: Int64?
            public var dueAtTo: Int64?
            public var completedAtFrom: Int64?
            public var completedAtTo: Int64?
            public var cursor: String?
            public var limit: Int32?

            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public enum BodyFormat: String, Codable, CaseIterable {
                case storage
                case atlasDocFormat = "atlas_doc_format"
            }

            public enum Status: String, Codable, CaseIterable {
                case complete
                case incomplete
            }

            public init(bodyFormat: BodyFormat? = nil, isIncludeBlankTasks: Bool? = nil, status: Status? = nil, taskID: [Int64]? = nil, spaceID: [Int64]? = nil, pageID: [Int64]? = nil, blogpostID: [Int64]? = nil, createdBy: [String]? = nil, assignedTo: [String]? = nil, completedBy: [String]? = nil, createdAtFrom: Int64? = nil, createdAtTo: Int64? = nil, dueAtFrom: Int64? = nil, dueAtTo: Int64? = nil, completedAtFrom: Int64? = nil, completedAtTo: Int64? = nil, cursor: String? = nil, limit: Int32? = nil) {
                self.bodyFormat = bodyFormat
                self.isIncludeBlankTasks = isIncludeBlankTasks
                self.status = status
                self.taskID = taskID
                self.spaceID = spaceID
                self.pageID = pageID
                self.blogpostID = blogpostID
                self.createdBy = createdBy
                self.assignedTo = assignedTo
                self.completedBy = completedBy
                self.createdAtFrom = createdAtFrom
                self.createdAtTo = createdAtTo
                self.dueAtFrom = dueAtFrom
                self.dueAtTo = dueAtTo
                self.completedAtFrom = completedAtFrom
                self.completedAtTo = completedAtTo
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(bodyFormat, forKey: "body-format")
                encoder.encode(isIncludeBlankTasks, forKey: "include-blank-tasks")
                encoder.encode(status, forKey: "status")
                encoder.encode(taskID, forKey: "task-id")
                encoder.encode(spaceID, forKey: "space-id")
                encoder.encode(pageID, forKey: "page-id")
                encoder.encode(blogpostID, forKey: "blogpost-id")
                encoder.encode(createdBy, forKey: "created-by")
                encoder.encode(assignedTo, forKey: "assigned-to")
                encoder.encode(completedBy, forKey: "completed-by")
                encoder.encode(createdAtFrom, forKey: "created-at-from")
                encoder.encode(createdAtTo, forKey: "created-at-to")
                encoder.encode(dueAtFrom, forKey: "due-at-from")
                encoder.encode(dueAtTo, forKey: "due-at-to")
                encoder.encode(completedAtFrom, forKey: "completed-at-from")
                encoder.encode(completedAtTo, forKey: "completed-at-to")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }
    }
}
