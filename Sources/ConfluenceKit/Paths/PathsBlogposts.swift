// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths {
    public static var blogposts: Blogposts {
        Blogposts(path: "/blogposts")
    }

    public struct Blogposts {
        /// Path: `/blogposts`
        public let path: String

        /// Get blog posts
        ///
        /// Returns all blog posts. The number of results is limited by the `limit` parameter and additional results (if available)
        /// will be available through the `next` URL present in the `Link` response header.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to access the Confluence site ('Can use' global permission).
        /// Only blog posts that the user has permission to view will be returned.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(path: path, method: "GET", query: parameters?.asQuery, id: "getBlogPosts")
        }

        /// MultiEntityResult<BlogPost>
        public struct GetResponse: Decodable {
            public var results: [ConfluenceKit.BlogPostBulk]?
            public var links: ConfluenceKit.MultiEntityLinks?

            public init(results: [ConfluenceKit.BlogPostBulk]? = nil, links: ConfluenceKit.MultiEntityLinks? = nil) {
                self.results = results
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.results = try values.decodeIfPresent([ConfluenceKit.BlogPostBulk].self, forKey: "results")
                self.links = try values.decodeIfPresent(ConfluenceKit.MultiEntityLinks.self, forKey: "_links")
            }
        }

        public enum GetResponseHeaders {
            /// This header contains URL(s) within angle brackets and a relation description for each URL, describing how the provided URL relates to the incoming request's URL. For example, rel="next" would be the URL necessary to get the next page of information. Example response header format: `Link: </wiki/api/v2/blogposts?cursor=<opaque cursor token>>; rel="next", <https://site.atlassian.net/wiki>; rel="base"`
            public static let link = HTTPHeader<String>(field: "Link")
        }

        public struct GetParameters {
            public var id: [Int64]?
            public var spaceID: [Int64]?
            /// The sort fields for blog posts. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
            public var sort: Sort?
            public var status: [Status]?
            public var title: String?
            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public var bodyFormat: BodyFormat?
            public var cursor: String?
            public var limit: Int32?

            /// The sort fields for blog posts. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
            public enum Sort: String, Codable, CaseIterable {
                case id
                case minusid = "-id"
                case createdDate = "created-date"
                case minuscreatedDate = "-created-date"
                case modifiedDate = "modified-date"
                case minusmodifiedDate = "-modified-date"
            }

            public enum Status: String, Codable, CaseIterable {
                case current
                case deleted
                case trashed
            }

            /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
            public enum BodyFormat: String, Codable, CaseIterable {
                case storage
                case atlasDocFormat = "atlas_doc_format"
            }

            public init(id: [Int64]? = nil, spaceID: [Int64]? = nil, sort: Sort? = nil, status: [Status]? = nil, title: String? = nil, bodyFormat: BodyFormat? = nil, cursor: String? = nil, limit: Int32? = nil) {
                self.id = id
                self.spaceID = spaceID
                self.sort = sort
                self.status = status
                self.title = title
                self.bodyFormat = bodyFormat
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(id, forKey: "id")
                encoder.encode(spaceID, forKey: "space-id")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(status, forKey: "status")
                encoder.encode(title, forKey: "title")
                encoder.encode(bodyFormat, forKey: "body-format")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create blog post
        ///
        /// Creates a new blog post in the space specified by the spaceId.
        /// 
        /// By default this will create the blog post as a non-draft, unless the status is specified as draft.
        /// If creating a non-draft, the title must not be empty.
        /// 
        /// Currently only supports the storage representation specified in the body.representation enums below
        public func post(isPrivate: Bool? = nil, _ body: PostRequest) -> Request<PostResponse> {
            Request(path: path, method: "POST", query: makePostQuery(isPrivate), body: body, id: "createBlogPost")
        }

        public struct PostResponse: Decodable {
            /// ID of the blog post.
            public var id: String?
            /// The status of the content.
            public var status: ConfluenceKit.BlogPostContentStatus?
            /// Title of the blog post.
            public var title: String?
            /// ID of the space the blog post is in.
            public var spaceID: String?
            /// The account ID of the user who created this blog post originally.
            public var authorID: String?
            /// Date and time when the blog post was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            public var version: ConfluenceKit.Version?
            /// Contains fields for each representation type requested.
            public var body: ConfluenceKit.BodySingle?
            public var labels: Labels?
            public var properties: Properties?
            public var operations: Operations?
            public var likes: Likes?
            public var versions: Versions?
            /// Whether the blog post has been favorited by the current user.
            public var isFavoritedByCurrentUser: Bool?
            public var links: ConfluenceKit.AbstractPageLinks?

            public struct Labels: Decodable {
                public var results: [ConfluenceKit.Label]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Label]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Label].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Properties: Decodable {
                public var results: [ConfluenceKit.ContentProperty]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.ContentProperty]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.ContentProperty].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Operations: Decodable {
                public var results: [ConfluenceKit.Operation]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Operation]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Operation].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Likes: Decodable {
                public var results: [ConfluenceKit.Like]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Like]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Like].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public struct Versions: Decodable {
                public var results: [ConfluenceKit.Version]?
                public var meta: ConfluenceKit.OptionalFieldMeta?
                public var links: ConfluenceKit.OptionalFieldLinks?

                public init(results: [ConfluenceKit.Version]? = nil, meta: ConfluenceKit.OptionalFieldMeta? = nil, links: ConfluenceKit.OptionalFieldLinks? = nil) {
                    self.results = results
                    self.meta = meta
                    self.links = links
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.results = try values.decodeIfPresent([ConfluenceKit.Version].self, forKey: "results")
                    self.meta = try values.decodeIfPresent(ConfluenceKit.OptionalFieldMeta.self, forKey: "meta")
                    self.links = try values.decodeIfPresent(ConfluenceKit.OptionalFieldLinks.self, forKey: "_links")
                }
            }

            public init(id: String? = nil, status: ConfluenceKit.BlogPostContentStatus? = nil, title: String? = nil, spaceID: String? = nil, authorID: String? = nil, createdAt: Date? = nil, version: ConfluenceKit.Version? = nil, body: ConfluenceKit.BodySingle? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, likes: Likes? = nil, versions: Versions? = nil, isFavoritedByCurrentUser: Bool? = nil, links: ConfluenceKit.AbstractPageLinks? = nil) {
                self.id = id
                self.status = status
                self.title = title
                self.spaceID = spaceID
                self.authorID = authorID
                self.createdAt = createdAt
                self.version = version
                self.body = body
                self.labels = labels
                self.properties = properties
                self.operations = operations
                self.likes = likes
                self.versions = versions
                self.isFavoritedByCurrentUser = isFavoritedByCurrentUser
                self.links = links
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.id = try values.decodeIfPresent(String.self, forKey: "id")
                self.status = try values.decodeIfPresent(ConfluenceKit.BlogPostContentStatus.self, forKey: "status")
                self.title = try values.decodeIfPresent(String.self, forKey: "title")
                self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
                self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
                self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
                self.version = try values.decodeIfPresent(ConfluenceKit.Version.self, forKey: "version")
                self.body = try values.decodeIfPresent(ConfluenceKit.BodySingle.self, forKey: "body")
                self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
                self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
                self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
                self.likes = try values.decodeIfPresent(Likes.self, forKey: "likes")
                self.versions = try values.decodeIfPresent(Versions.self, forKey: "versions")
                self.isFavoritedByCurrentUser = try values.decodeIfPresent(Bool.self, forKey: "isFavoritedByCurrentUser")
                self.links = try values.decodeIfPresent(ConfluenceKit.AbstractPageLinks.self, forKey: "_links")
            }
        }

        private func makePostQuery(_ isPrivate: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isPrivate, forKey: "private")
            return encoder.items
        }

        public struct PostRequest: Encodable {
            /// ID of the space
            public var spaceID: String
            /// The status of the blog post, specifies if the blog post will be created as a new blog post or a draft
            public var status: Status?
            /// Title of the blog post, required if creating non-draft.
            public var title: String?
            public var body: Body?

            /// The status of the blog post, specifies if the blog post will be created as a new blog post or a draft
            public enum Status: String, Codable, CaseIterable {
                case current
                case draft
            }

            public enum Body: Encodable {
                case blogPostBodyWrite(ConfluenceKit.BlogPostBodyWrite)
                case blogPostNestedBodyWrite(ConfluenceKit.BlogPostNestedBodyWrite)

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    switch self {
                    case .blogPostBodyWrite(let value): try container.encode(value)
                    case .blogPostNestedBodyWrite(let value): try container.encode(value)
                    }
                }
            }

            public init(spaceID: String, status: Status? = nil, title: String? = nil, body: Body? = nil) {
                self.spaceID = spaceID
                self.status = status
                self.title = title
                self.body = body
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encode(spaceID, forKey: "spaceId")
                try values.encodeIfPresent(status, forKey: "status")
                try values.encodeIfPresent(title, forKey: "title")
                try values.encodeIfPresent(body, forKey: "body")
            }
        }
    }
}
