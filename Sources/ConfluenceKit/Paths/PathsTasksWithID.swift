// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import HTTPHeaders
import URLQueryEncoder

extension Paths.Tasks {
    public func id(_ id: Int) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/tasks/{id}`
        public let path: String

        /// Get task by id
        ///
        /// Returns a specific task. 
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to view the containing page or blog post and its corresponding space.
        public func get(bodyFormat: BodyFormat? = nil) -> Request<ConfluenceKit.Task> {
            Request(path: path, method: "GET", query: makeGetQuery(bodyFormat), id: "getTaskById")
        }

        private func makeGetQuery(_ bodyFormat: BodyFormat?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(bodyFormat, forKey: "body-format")
            return encoder.items
        }

        /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
        public enum BodyFormat: String, Codable, CaseIterable {
            case storage
            case atlasDocFormat = "atlas_doc_format"
        }

        /// Update task
        ///
        /// Update a task by id. This endpoint currently only supports updating task status.
        /// 
        /// **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// Permission to edit the containing page or blog post and view its corresponding space.
        public func put(bodyFormat: BodyFormat? = nil, _ body: PutRequest) -> Request<ConfluenceKit.Task> {
            Request(path: path, method: "PUT", query: makePutQuery(bodyFormat), body: body, id: "updateTask")
        }

        private func makePutQuery(_ bodyFormat: BodyFormat?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(bodyFormat, forKey: "body-format")
            return encoder.items
        }

        public struct PutRequest: Encodable {
            /// ID of the task.
            public var id: String?
            /// Local ID of the task. This ID is local to the corresponding page or blog post.
            public var localID: String?
            /// ID of the space the task is in.
            public var spaceID: String?
            /// ID of the page the task is in.
            public var pageID: String?
            /// ID of the blog post the task is in.
            public var blogPostID: String?
            /// Status of the task.
            public var status: Status
            /// Account ID of the user who created this task.
            public var createdBy: String?
            /// Account ID of the user to whom this task is assigned.
            public var assignedTo: String?
            /// Account ID of the user who completed this task.
            public var completedBy: String?
            /// Date and time when the task was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var createdAt: Date?
            /// Date and time when the task was updated. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var updatedAt: Date?
            /// Date and time when the task is due. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var dueAt: Date?
            /// Date and time when the task was completed. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
            public var completedAt: Date?

            /// Status of the task.
            public enum Status: String, Codable, CaseIterable {
                case complete
                case incomplete
            }

            public init(id: String? = nil, localID: String? = nil, spaceID: String? = nil, pageID: String? = nil, blogPostID: String? = nil, status: Status, createdBy: String? = nil, assignedTo: String? = nil, completedBy: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, dueAt: Date? = nil, completedAt: Date? = nil) {
                self.id = id
                self.localID = localID
                self.spaceID = spaceID
                self.pageID = pageID
                self.blogPostID = blogPostID
                self.status = status
                self.createdBy = createdBy
                self.assignedTo = assignedTo
                self.completedBy = completedBy
                self.createdAt = createdAt
                self.updatedAt = updatedAt
                self.dueAt = dueAt
                self.completedAt = completedAt
            }

            public func encode(to encoder: Encoder) throws {
                var values = encoder.container(keyedBy: StringCodingKey.self)
                try values.encodeIfPresent(id, forKey: "id")
                try values.encodeIfPresent(localID, forKey: "localId")
                try values.encodeIfPresent(spaceID, forKey: "spaceId")
                try values.encodeIfPresent(pageID, forKey: "pageId")
                try values.encodeIfPresent(blogPostID, forKey: "blogPostId")
                try values.encode(status, forKey: "status")
                try values.encodeIfPresent(createdBy, forKey: "createdBy")
                try values.encodeIfPresent(assignedTo, forKey: "assignedTo")
                try values.encodeIfPresent(completedBy, forKey: "completedBy")
                try values.encodeIfPresent(createdAt, forKey: "createdAt")
                try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
                try values.encodeIfPresent(dueAt, forKey: "dueAt")
                try values.encodeIfPresent(completedAt, forKey: "completedAt")
            }
        }
    }
}
