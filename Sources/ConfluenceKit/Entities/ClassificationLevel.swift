// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

/// A unit of [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/) defined by an organiation. 
/// A classification level may be associated with specific storage and handling requirements or expectations.
public struct ClassificationLevel: Codable {
    /// The ID of the classification level.
    public var id: String?
    public var status: ClassificationLevelStatus?
    /// The order of the classification level object.
    public var order: Double?
    /// The name of the classification level object.
    public var name: String?
    /// The description of the classification level object.
    public var description: String?
    /// The guideline of the classification level object.
    public var guideline: String?
    public var color: ClassificationLevelColor?

    public init(id: String? = nil, status: ClassificationLevelStatus? = nil, order: Double? = nil, name: String? = nil, description: String? = nil, guideline: String? = nil, color: ClassificationLevelColor? = nil) {
        self.id = id
        self.status = status
        self.order = order
        self.name = name
        self.description = description
        self.guideline = guideline
        self.color = color
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.status = try values.decodeIfPresent(ClassificationLevelStatus.self, forKey: "status")
        self.order = try values.decodeIfPresent(Double.self, forKey: "order")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.guideline = try values.decodeIfPresent(String.self, forKey: "guideline")
        self.color = try values.decodeIfPresent(ClassificationLevelColor.self, forKey: "color")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(order, forKey: "order")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(guideline, forKey: "guideline")
        try values.encodeIfPresent(color, forKey: "color")
    }
}
