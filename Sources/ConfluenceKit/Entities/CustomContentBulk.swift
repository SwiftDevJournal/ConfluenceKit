// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CustomContentBulk: Codable {
    /// ID of the custom content.
    public var id: String?
    /// The type of custom content.
    public var type: String?
    /// The status of the content.
    public var status: ContentStatus?
    /// Title of the custom content.
    public var title: String?
    /// ID of the space the custom content is in.
    /// 
    /// Note: This is always returned, regardless of if the custom content has a container that is a space.
    public var spaceID: String?
    /// ID of the containing page.
    /// 
    /// Note: This is only returned if the custom content has a container that is a page.
    public var pageID: String?
    /// ID of the containing blog post.
    /// 
    /// Note: This is only returned if the custom content has a container that is a blog post.
    public var blogPostID: String?
    /// ID of the containing custom content.
    /// 
    /// Note: This is only returned if the custom content has a container that is custom content.
    public var customContentID: String?
    /// The account ID of the user who created this custom content originally.
    public var authorID: String?
    /// Date and time when the custom content was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    public var version: Version?
    /// Contains fields for each representation type requested.
    public var body: CustomContentBodyBulk?
    public var links: CustomContentLinks?

    public init(id: String? = nil, type: String? = nil, status: ContentStatus? = nil, title: String? = nil, spaceID: String? = nil, pageID: String? = nil, blogPostID: String? = nil, customContentID: String? = nil, authorID: String? = nil, createdAt: Date? = nil, version: Version? = nil, body: CustomContentBodyBulk? = nil, links: CustomContentLinks? = nil) {
        self.id = id
        self.type = type
        self.status = status
        self.title = title
        self.spaceID = spaceID
        self.pageID = pageID
        self.blogPostID = blogPostID
        self.customContentID = customContentID
        self.authorID = authorID
        self.createdAt = createdAt
        self.version = version
        self.body = body
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.status = try values.decodeIfPresent(ContentStatus.self, forKey: "status")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
        self.pageID = try values.decodeIfPresent(String.self, forKey: "pageId")
        self.blogPostID = try values.decodeIfPresent(String.self, forKey: "blogPostId")
        self.customContentID = try values.decodeIfPresent(String.self, forKey: "customContentId")
        self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
        self.body = try values.decodeIfPresent(CustomContentBodyBulk.self, forKey: "body")
        self.links = try values.decodeIfPresent(CustomContentLinks.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(spaceID, forKey: "spaceId")
        try values.encodeIfPresent(pageID, forKey: "pageId")
        try values.encodeIfPresent(blogPostID, forKey: "blogPostId")
        try values.encodeIfPresent(customContentID, forKey: "customContentId")
        try values.encodeIfPresent(authorID, forKey: "authorId")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(version, forKey: "version")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encodeIfPresent(links, forKey: "_links")
    }
}
