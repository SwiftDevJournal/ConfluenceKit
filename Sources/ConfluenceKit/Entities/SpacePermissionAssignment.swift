// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SpacePermissionAssignment: Codable {
    /// ID of the space permission.
    public var id: String?
    /// The entity the space permissions corresponds to.
    public var principal: Principal?
    /// The operation the space permission corresponds to.
    public var operation: Operation?

    /// The entity the space permissions corresponds to.
    public struct Principal: Codable {
        public var type: `Type`?
        /// ID of the entity.
        public var id: String?

        public enum `Type`: String, Codable, CaseIterable {
            case user
            case group
            case role
        }

        public init(type: `Type`? = nil, id: String? = nil) {
            self.type = type
            self.id = id
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.type = try values.decodeIfPresent(`Type`.self, forKey: "type")
            self.id = try values.decodeIfPresent(String.self, forKey: "id")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(id, forKey: "id")
        }
    }

    /// The operation the space permission corresponds to.
    public struct Operation: Codable {
        /// The type of operation.
        public var key: Key?
        /// The type of entity the operation type targets.
        public var targetType: TargetType?

        /// The type of operation.
        public enum Key: String, Codable, CaseIterable {
            case use
            case create
            case read
            case update
            case delete
            case copy
            case move
            case export
            case purge
            case purgeVersion = "purge_version"
            case administer
            case restore
            case createSpace = "create_space"
            case restrictContent = "restrict_content"
            case archive
        }

        /// The type of entity the operation type targets.
        public enum TargetType: String, Codable, CaseIterable {
            case page
            case blogpost
            case comment
            case attachment
            case whiteboard
            case database
            case embed
            case folder
            case space
            case application
            case userProfile
        }

        public init(key: Key? = nil, targetType: TargetType? = nil) {
            self.key = key
            self.targetType = targetType
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.key = try values.decodeIfPresent(Key.self, forKey: "key")
            self.targetType = try values.decodeIfPresent(TargetType.self, forKey: "targetType")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(key, forKey: "key")
            try values.encodeIfPresent(targetType, forKey: "targetType")
        }
    }

    public init(id: String? = nil, principal: Principal? = nil, operation: Operation? = nil) {
        self.id = id
        self.principal = principal
        self.operation = operation
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.principal = try values.decodeIfPresent(Principal.self, forKey: "principal")
        self.operation = try values.decodeIfPresent(Operation.self, forKey: "operation")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(principal, forKey: "principal")
        try values.encodeIfPresent(operation, forKey: "operation")
    }
}
