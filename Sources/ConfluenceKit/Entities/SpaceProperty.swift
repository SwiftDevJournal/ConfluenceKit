// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SpaceProperty: Codable {
    /// ID of the space property.
    public var id: String?
    /// Key of the space property.
    public var key: String?
    /// Value of the space property.
    public var value: AnyJSON?
    /// RFC3339 compliant date time at which the property was created.
    public var createdAt: Date?
    /// Atlassian account ID of the user that created the space property.
    public var createdBy: String?
    public var version: Version?

    public struct Version: Codable {
        /// RFC3339 compliant date time at which the property's current version was created.
        public var createdAt: Date?
        /// Atlassian account ID of the user that created the space property's current version.
        public var createdBy: String?
        /// Message associated with the current version.
        public var message: String?
        /// The space property's current version number.
        public var number: Int32?

        public init(createdAt: Date? = nil, createdBy: String? = nil, message: String? = nil, number: Int32? = nil) {
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.message = message
            self.number = number
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
            self.createdBy = try values.decodeIfPresent(String.self, forKey: "createdBy")
            self.message = try values.decodeIfPresent(String.self, forKey: "message")
            self.number = try values.decodeIfPresent(Int32.self, forKey: "number")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(createdAt, forKey: "createdAt")
            try values.encodeIfPresent(createdBy, forKey: "createdBy")
            try values.encodeIfPresent(message, forKey: "message")
            try values.encodeIfPresent(number, forKey: "number")
        }
    }

    public init(id: String? = nil, key: String? = nil, value: AnyJSON? = nil, createdAt: Date? = nil, createdBy: String? = nil, version: Version? = nil) {
        self.id = id
        self.key = key
        self.value = value
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.value = try values.decodeIfPresent(AnyJSON.self, forKey: "value")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.createdBy = try values.decodeIfPresent(String.self, forKey: "createdBy")
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(value, forKey: "value")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(createdBy, forKey: "createdBy")
        try values.encodeIfPresent(version, forKey: "version")
    }
}
