// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct PageBulk: Codable {
    /// ID of the page.
    public var id: String?
    /// The status of the content.
    public var status: ContentStatus?
    /// Title of the page.
    public var title: String?
    /// ID of the space the page is in.
    public var spaceID: String?
    /// ID of the parent page, or null if there is no parent page.
    public var parentID: String?
    /// Content type of the parent, or null if there is no parent.
    public var parentType: ParentContentType?
    /// Position of child page within the given parent page tree.
    public var position: Int32?
    /// The account ID of the user who created this page originally.
    public var authorID: String?
    /// The account ID of the user who owns this page.
    public var ownerID: String?
    /// The account ID of the user who owned this page previously, or null if there is no previous owner.
    public var lastOwnerID: String?
    /// Date and time when the page was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    public var version: Version?
    /// Contains fields for each representation type requested.
    public var body: BodyBulk?
    public var links: AbstractPageLinks?

    public init(id: String? = nil, status: ContentStatus? = nil, title: String? = nil, spaceID: String? = nil, parentID: String? = nil, parentType: ParentContentType? = nil, position: Int32? = nil, authorID: String? = nil, ownerID: String? = nil, lastOwnerID: String? = nil, createdAt: Date? = nil, version: Version? = nil, body: BodyBulk? = nil, links: AbstractPageLinks? = nil) {
        self.id = id
        self.status = status
        self.title = title
        self.spaceID = spaceID
        self.parentID = parentID
        self.parentType = parentType
        self.position = position
        self.authorID = authorID
        self.ownerID = ownerID
        self.lastOwnerID = lastOwnerID
        self.createdAt = createdAt
        self.version = version
        self.body = body
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.status = try values.decodeIfPresent(ContentStatus.self, forKey: "status")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
        self.parentID = try values.decodeIfPresent(String.self, forKey: "parentId")
        self.parentType = try values.decodeIfPresent(ParentContentType.self, forKey: "parentType")
        self.position = try values.decodeIfPresent(Int32.self, forKey: "position")
        self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
        self.ownerID = try values.decodeIfPresent(String.self, forKey: "ownerId")
        self.lastOwnerID = try values.decodeIfPresent(String.self, forKey: "lastOwnerId")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
        self.body = try values.decodeIfPresent(BodyBulk.self, forKey: "body")
        self.links = try values.decodeIfPresent(AbstractPageLinks.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(spaceID, forKey: "spaceId")
        try values.encodeIfPresent(parentID, forKey: "parentId")
        try values.encodeIfPresent(parentType, forKey: "parentType")
        try values.encodeIfPresent(position, forKey: "position")
        try values.encodeIfPresent(authorID, forKey: "authorId")
        try values.encodeIfPresent(ownerID, forKey: "ownerId")
        try values.encodeIfPresent(lastOwnerID, forKey: "lastOwnerId")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(version, forKey: "version")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encodeIfPresent(links, forKey: "_links")
    }
}
