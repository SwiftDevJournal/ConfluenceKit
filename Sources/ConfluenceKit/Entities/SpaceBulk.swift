// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SpaceBulk: Codable {
    /// ID of the space.
    public var id: String?
    /// Key of the space.
    public var key: String?
    /// Name of the space.
    public var name: String?
    /// The type of space.
    public var type: SpaceType?
    /// The status of the space.
    public var status: SpaceStatus?
    /// The account ID of the user who created this space originally.
    public var authorID: String?
    /// Date and time when the space was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    /// ID of the space's homepage.
    public var homepageID: String?
    /// Contains fields for each representation type requested.
    public var description: SpaceDescription?
    /// The icon of the space
    public var icon: SpaceIcon?
    public var links: SpaceLinks?

    public init(id: String? = nil, key: String? = nil, name: String? = nil, type: SpaceType? = nil, status: SpaceStatus? = nil, authorID: String? = nil, createdAt: Date? = nil, homepageID: String? = nil, description: SpaceDescription? = nil, icon: SpaceIcon? = nil, links: SpaceLinks? = nil) {
        self.id = id
        self.key = key
        self.name = name
        self.type = type
        self.status = status
        self.authorID = authorID
        self.createdAt = createdAt
        self.homepageID = homepageID
        self.description = description
        self.icon = icon
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.type = try values.decodeIfPresent(SpaceType.self, forKey: "type")
        self.status = try values.decodeIfPresent(SpaceStatus.self, forKey: "status")
        self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.homepageID = try values.decodeIfPresent(String.self, forKey: "homepageId")
        self.description = try values.decodeIfPresent(SpaceDescription.self, forKey: "description")
        self.icon = try values.decodeIfPresent(SpaceIcon.self, forKey: "icon")
        self.links = try values.decodeIfPresent(SpaceLinks.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(authorID, forKey: "authorId")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(homepageID, forKey: "homepageId")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(links, forKey: "_links")
    }
}
