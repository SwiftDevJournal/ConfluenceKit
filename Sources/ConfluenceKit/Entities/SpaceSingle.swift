// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SpaceSingle: Codable {
    /// ID of the space.
    public var id: String?
    /// Key of the space.
    public var key: String?
    /// Name of the space.
    public var name: String?
    /// The type of space.
    public var type: SpaceType?
    /// The status of the space.
    public var status: SpaceStatus?
    /// The account ID of the user who created this space originally.
    public var authorID: String?
    /// Date and time when the space was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    /// ID of the space's homepage.
    public var homepageID: String?
    /// Contains fields for each representation type requested.
    public var description: SpaceDescription?
    /// The icon of the space
    public var icon: SpaceIcon?
    public var labels: Labels?
    public var properties: Properties?
    public var operations: Operations?
    public var permissions: Permissions?
    public var links: SpaceLinks?

    public struct Labels: Codable {
        public var results: [Label]?
        public var meta: OptionalFieldMeta?
        public var links: OptionalFieldLinks?

        public init(results: [Label]? = nil, meta: OptionalFieldMeta? = nil, links: OptionalFieldLinks? = nil) {
            self.results = results
            self.meta = meta
            self.links = links
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.results = try values.decodeIfPresent([Label].self, forKey: "results")
            self.meta = try values.decodeIfPresent(OptionalFieldMeta.self, forKey: "meta")
            self.links = try values.decodeIfPresent(OptionalFieldLinks.self, forKey: "_links")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(results, forKey: "results")
            try values.encodeIfPresent(meta, forKey: "meta")
            try values.encodeIfPresent(links, forKey: "_links")
        }
    }

    public struct Properties: Codable {
        public var results: [SpaceProperty]?
        public var meta: OptionalFieldMeta?
        public var links: OptionalFieldLinks?

        public init(results: [SpaceProperty]? = nil, meta: OptionalFieldMeta? = nil, links: OptionalFieldLinks? = nil) {
            self.results = results
            self.meta = meta
            self.links = links
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.results = try values.decodeIfPresent([SpaceProperty].self, forKey: "results")
            self.meta = try values.decodeIfPresent(OptionalFieldMeta.self, forKey: "meta")
            self.links = try values.decodeIfPresent(OptionalFieldLinks.self, forKey: "_links")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(results, forKey: "results")
            try values.encodeIfPresent(meta, forKey: "meta")
            try values.encodeIfPresent(links, forKey: "_links")
        }
    }

    public struct Operations: Codable {
        public var results: [Operation]?
        public var meta: OptionalFieldMeta?
        public var links: OptionalFieldLinks?

        public init(results: [Operation]? = nil, meta: OptionalFieldMeta? = nil, links: OptionalFieldLinks? = nil) {
            self.results = results
            self.meta = meta
            self.links = links
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.results = try values.decodeIfPresent([Operation].self, forKey: "results")
            self.meta = try values.decodeIfPresent(OptionalFieldMeta.self, forKey: "meta")
            self.links = try values.decodeIfPresent(OptionalFieldLinks.self, forKey: "_links")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(results, forKey: "results")
            try values.encodeIfPresent(meta, forKey: "meta")
            try values.encodeIfPresent(links, forKey: "_links")
        }
    }

    public struct Permissions: Codable {
        public var results: [SpacePermissionAssignment]?
        public var meta: OptionalFieldMeta?
        public var links: OptionalFieldLinks?

        public init(results: [SpacePermissionAssignment]? = nil, meta: OptionalFieldMeta? = nil, links: OptionalFieldLinks? = nil) {
            self.results = results
            self.meta = meta
            self.links = links
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.results = try values.decodeIfPresent([SpacePermissionAssignment].self, forKey: "results")
            self.meta = try values.decodeIfPresent(OptionalFieldMeta.self, forKey: "meta")
            self.links = try values.decodeIfPresent(OptionalFieldLinks.self, forKey: "_links")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(results, forKey: "results")
            try values.encodeIfPresent(meta, forKey: "meta")
            try values.encodeIfPresent(links, forKey: "_links")
        }
    }

    public init(id: String? = nil, key: String? = nil, name: String? = nil, type: SpaceType? = nil, status: SpaceStatus? = nil, authorID: String? = nil, createdAt: Date? = nil, homepageID: String? = nil, description: SpaceDescription? = nil, icon: SpaceIcon? = nil, labels: Labels? = nil, properties: Properties? = nil, operations: Operations? = nil, permissions: Permissions? = nil, links: SpaceLinks? = nil) {
        self.id = id
        self.key = key
        self.name = name
        self.type = type
        self.status = status
        self.authorID = authorID
        self.createdAt = createdAt
        self.homepageID = homepageID
        self.description = description
        self.icon = icon
        self.labels = labels
        self.properties = properties
        self.operations = operations
        self.permissions = permissions
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.type = try values.decodeIfPresent(SpaceType.self, forKey: "type")
        self.status = try values.decodeIfPresent(SpaceStatus.self, forKey: "status")
        self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.homepageID = try values.decodeIfPresent(String.self, forKey: "homepageId")
        self.description = try values.decodeIfPresent(SpaceDescription.self, forKey: "description")
        self.icon = try values.decodeIfPresent(SpaceIcon.self, forKey: "icon")
        self.labels = try values.decodeIfPresent(Labels.self, forKey: "labels")
        self.properties = try values.decodeIfPresent(Properties.self, forKey: "properties")
        self.operations = try values.decodeIfPresent(Operations.self, forKey: "operations")
        self.permissions = try values.decodeIfPresent(Permissions.self, forKey: "permissions")
        self.links = try values.decodeIfPresent(SpaceLinks.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(authorID, forKey: "authorId")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(homepageID, forKey: "homepageId")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(labels, forKey: "labels")
        try values.encodeIfPresent(properties, forKey: "properties")
        try values.encodeIfPresent(operations, forKey: "operations")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(links, forKey: "_links")
    }
}
