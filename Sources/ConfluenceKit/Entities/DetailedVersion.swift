// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DetailedVersion: Codable {
    /// The current version number.
    public var number: Int32?
    /// The account ID of the user who created this version.
    public var authorID: String?
    /// Message associated with the current version.
    public var message: String?
    /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
    public var isMinorEdit: Bool?
    /// Describes if the content type is modified in this version (e.g. page to blog)
    public var isContentTypeModified: Bool?
    /// The account IDs of users that collaborated on this version.
    public var collaborators: [String]?
    /// The version number of the version prior to this current content update.
    public var prevVersion: Int32?
    /// The version number of the version after this current content update.
    public var nextVersion: Int32?

    public init(number: Int32? = nil, authorID: String? = nil, message: String? = nil, createdAt: Date? = nil, isMinorEdit: Bool? = nil, isContentTypeModified: Bool? = nil, collaborators: [String]? = nil, prevVersion: Int32? = nil, nextVersion: Int32? = nil) {
        self.number = number
        self.authorID = authorID
        self.message = message
        self.createdAt = createdAt
        self.isMinorEdit = isMinorEdit
        self.isContentTypeModified = isContentTypeModified
        self.collaborators = collaborators
        self.prevVersion = prevVersion
        self.nextVersion = nextVersion
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.number = try values.decodeIfPresent(Int32.self, forKey: "number")
        self.authorID = try values.decodeIfPresent(String.self, forKey: "authorId")
        self.message = try values.decodeIfPresent(String.self, forKey: "message")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.isMinorEdit = try values.decodeIfPresent(Bool.self, forKey: "minorEdit")
        self.isContentTypeModified = try values.decodeIfPresent(Bool.self, forKey: "contentTypeModified")
        self.collaborators = try values.decodeIfPresent([String].self, forKey: "collaborators")
        self.prevVersion = try values.decodeIfPresent(Int32.self, forKey: "prevVersion")
        self.nextVersion = try values.decodeIfPresent(Int32.self, forKey: "nextVersion")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(number, forKey: "number")
        try values.encodeIfPresent(authorID, forKey: "authorId")
        try values.encodeIfPresent(message, forKey: "message")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(isMinorEdit, forKey: "minorEdit")
        try values.encodeIfPresent(isContentTypeModified, forKey: "contentTypeModified")
        try values.encodeIfPresent(collaborators, forKey: "collaborators")
        try values.encodeIfPresent(prevVersion, forKey: "prevVersion")
        try values.encodeIfPresent(nextVersion, forKey: "nextVersion")
    }
}
