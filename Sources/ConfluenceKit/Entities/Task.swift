// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct Task: Codable {
    /// ID of the task.
    public var id: String?
    /// Local ID of the task. This ID is local to the corresponding page or blog post.
    public var localID: String?
    /// ID of the space the task is in.
    public var spaceID: String?
    /// ID of the page the task is in.
    public var pageID: String?
    /// ID of the blog post the task is in.
    public var blogPostID: String?
    /// Status of the task.
    public var status: Status?
    /// Contains fields for each representation type requested.
    public var body: TaskBodySingle?
    /// Account ID of the user who created this task.
    public var createdBy: String?
    /// Account ID of the user to whom this task is assigned.
    public var assignedTo: String?
    /// Account ID of the user who completed this task.
    public var completedBy: String?
    /// Date and time when the task was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var createdAt: Date?
    /// Date and time when the task was updated. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var updatedAt: Date?
    /// Date and time when the task is due. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var dueAt: Date?
    /// Date and time when the task was completed. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
    public var completedAt: Date?

    /// Status of the task.
    public enum Status: String, Codable, CaseIterable {
        case complete
        case incomplete
    }

    public init(id: String? = nil, localID: String? = nil, spaceID: String? = nil, pageID: String? = nil, blogPostID: String? = nil, status: Status? = nil, body: TaskBodySingle? = nil, createdBy: String? = nil, assignedTo: String? = nil, completedBy: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, dueAt: Date? = nil, completedAt: Date? = nil) {
        self.id = id
        self.localID = localID
        self.spaceID = spaceID
        self.pageID = pageID
        self.blogPostID = blogPostID
        self.status = status
        self.body = body
        self.createdBy = createdBy
        self.assignedTo = assignedTo
        self.completedBy = completedBy
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.dueAt = dueAt
        self.completedAt = completedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.localID = try values.decodeIfPresent(String.self, forKey: "localId")
        self.spaceID = try values.decodeIfPresent(String.self, forKey: "spaceId")
        self.pageID = try values.decodeIfPresent(String.self, forKey: "pageId")
        self.blogPostID = try values.decodeIfPresent(String.self, forKey: "blogPostId")
        self.status = try values.decodeIfPresent(Status.self, forKey: "status")
        self.body = try values.decodeIfPresent(TaskBodySingle.self, forKey: "body")
        self.createdBy = try values.decodeIfPresent(String.self, forKey: "createdBy")
        self.assignedTo = try values.decodeIfPresent(String.self, forKey: "assignedTo")
        self.completedBy = try values.decodeIfPresent(String.self, forKey: "completedBy")
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "createdAt")
        self.updatedAt = try values.decodeIfPresent(Date.self, forKey: "updatedAt")
        self.dueAt = try values.decodeIfPresent(Date.self, forKey: "dueAt")
        self.completedAt = try values.decodeIfPresent(Date.self, forKey: "completedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(localID, forKey: "localId")
        try values.encodeIfPresent(spaceID, forKey: "spaceId")
        try values.encodeIfPresent(pageID, forKey: "pageId")
        try values.encodeIfPresent(blogPostID, forKey: "blogPostId")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encodeIfPresent(createdBy, forKey: "createdBy")
        try values.encodeIfPresent(assignedTo, forKey: "assignedTo")
        try values.encodeIfPresent(completedBy, forKey: "completedBy")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
        try values.encodeIfPresent(dueAt, forKey: "dueAt")
        try values.encodeIfPresent(completedAt, forKey: "completedAt")
    }
}
