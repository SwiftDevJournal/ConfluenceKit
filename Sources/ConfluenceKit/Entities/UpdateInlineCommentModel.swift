// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct UpdateInlineCommentModel: Codable {
    public var version: Version?
    public var body: Body?
    /// Resolved state of the comment. Set to true to resolve the comment, set to false to reopen it. If
    /// matching the existing state (i.e. true -> resolved or false -> open/reopened) , no change will occur. A dangling
    /// comment cannot be updated.
    public var isResolved: Bool?

    public struct Version: Codable {
        /// Number of new version. Should be 1 higher than current version of the comment.
        public var number: Int?
        /// Optional message store for the new version.
        public var message: String?

        public init(number: Int? = nil, message: String? = nil) {
            self.number = number
            self.message = message
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.number = try values.decodeIfPresent(Int.self, forKey: "number")
            self.message = try values.decodeIfPresent(String.self, forKey: "message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(number, forKey: "number")
            try values.encodeIfPresent(message, forKey: "message")
        }
    }

    public enum Body: Codable {
        case commentBodyWrite(CommentBodyWrite)
        case commentNestedBodyWrite(CommentNestedBodyWrite)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CommentBodyWrite.self) {
                self = .commentBodyWrite(value)
            } else if let value = try? container.decode(CommentNestedBodyWrite.self) {
                self = .commentNestedBodyWrite(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (CommentBodyWrite, CommentNestedBodyWrite)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .commentBodyWrite(let value): try container.encode(value)
            case .commentNestedBodyWrite(let value): try container.encode(value)
            }
        }
    }

    public init(version: Version? = nil, body: Body? = nil, isResolved: Bool? = nil) {
        self.version = version
        self.body = body
        self.isResolved = isResolved
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
        self.body = try values.decodeIfPresent(Body.self, forKey: "body")
        self.isResolved = try values.decodeIfPresent(Bool.self, forKey: "resolved")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(version, forKey: "version")
        try values.encodeIfPresent(body, forKey: "body")
        try values.encodeIfPresent(isResolved, forKey: "resolved")
    }
}
