// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct DataPolicySpace: Codable {
    /// ID of the space.
    public var id: String?
    /// Key of the space.
    public var key: String?
    /// Name of the space.
    public var name: String?
    /// Contains fields for each representation type requested.
    public var description: SpaceDescription?
    public var dataPolicy: DataPolicy?
    /// The icon of the space
    public var icon: SpaceIcon?
    public var links: SpaceLinks?

    public struct DataPolicy: Codable {
        /// Whether the space contains any content blocked for (inaccessible to) the requesting client application.
        public var isAnyContentBlocked: Bool?

        public init(isAnyContentBlocked: Bool? = nil) {
            self.isAnyContentBlocked = isAnyContentBlocked
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.isAnyContentBlocked = try values.decodeIfPresent(Bool.self, forKey: "anyContentBlocked")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(isAnyContentBlocked, forKey: "anyContentBlocked")
        }
    }

    public init(id: String? = nil, key: String? = nil, name: String? = nil, description: SpaceDescription? = nil, dataPolicy: DataPolicy? = nil, icon: SpaceIcon? = nil, links: SpaceLinks? = nil) {
        self.id = id
        self.key = key
        self.name = name
        self.description = description
        self.dataPolicy = dataPolicy
        self.icon = icon
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(SpaceDescription.self, forKey: "description")
        self.dataPolicy = try values.decodeIfPresent(DataPolicy.self, forKey: "dataPolicy")
        self.icon = try values.decodeIfPresent(SpaceIcon.self, forKey: "icon")
        self.links = try values.decodeIfPresent(SpaceLinks.self, forKey: "_links")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(dataPolicy, forKey: "dataPolicy")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(links, forKey: "_links")
    }
}
