// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct User: Codable {
    /// Display name of the user.
    public var displayName: String?
    /// Time zone of the user. Depending on the user's privacy
    /// setting, this may return null.
    public var timeZone: String?
    /// Space ID of the user's personal space. Returns null, if no personal space for the user.
    public var personalSpaceID: String?
    /// Whether the user is an external collaborator.
    public var isExternalCollaborator: Bool?
    /// The account status of the user.
    public var accountStatus: AccountStatus?
    /// Account ID of the user.
    public var accountID: String?
    /// The email address of the user. Depending on the user's privacy setting, this may return an empty string.
    public var email: String?
    /// The account type of the user.
    public var accountType: AccountType?
    /// Public name of the user.
    public var publicName: String?
    /// This object represents an icon. If used as a profilePicture, this may be returned as null, depending on the user's privacy setting.
    public var profilePicture: Icon?

    public init(displayName: String? = nil, timeZone: String? = nil, personalSpaceID: String? = nil, isExternalCollaborator: Bool? = nil, accountStatus: AccountStatus? = nil, accountID: String? = nil, email: String? = nil, accountType: AccountType? = nil, publicName: String? = nil, profilePicture: Icon? = nil) {
        self.displayName = displayName
        self.timeZone = timeZone
        self.personalSpaceID = personalSpaceID
        self.isExternalCollaborator = isExternalCollaborator
        self.accountStatus = accountStatus
        self.accountID = accountID
        self.email = email
        self.accountType = accountType
        self.publicName = publicName
        self.profilePicture = profilePicture
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.displayName = try values.decodeIfPresent(String.self, forKey: "displayName")
        self.timeZone = try values.decodeIfPresent(String.self, forKey: "timeZone")
        self.personalSpaceID = try values.decodeIfPresent(String.self, forKey: "personalSpaceId")
        self.isExternalCollaborator = try values.decodeIfPresent(Bool.self, forKey: "isExternalCollaborator")
        self.accountStatus = try values.decodeIfPresent(AccountStatus.self, forKey: "accountStatus")
        self.accountID = try values.decodeIfPresent(String.self, forKey: "accountId")
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.accountType = try values.decodeIfPresent(AccountType.self, forKey: "accountType")
        self.publicName = try values.decodeIfPresent(String.self, forKey: "publicName")
        self.profilePicture = try values.decodeIfPresent(Icon.self, forKey: "profilePicture")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(displayName, forKey: "displayName")
        try values.encodeIfPresent(timeZone, forKey: "timeZone")
        try values.encodeIfPresent(personalSpaceID, forKey: "personalSpaceId")
        try values.encodeIfPresent(isExternalCollaborator, forKey: "isExternalCollaborator")
        try values.encodeIfPresent(accountStatus, forKey: "accountStatus")
        try values.encodeIfPresent(accountID, forKey: "accountId")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(accountType, forKey: "accountType")
        try values.encodeIfPresent(publicName, forKey: "publicName")
        try values.encodeIfPresent(profilePicture, forKey: "profilePicture")
    }
}
