// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct SpacePropertyUpdateRequest: Codable {
    /// Key of the space property
    public var key: String?
    /// Value of the space property.
    public var value: AnyJSON?
    /// New version number and associated message
    public var version: Version?

    /// New version number and associated message
    public struct Version: Codable {
        /// Version number of the new version. Should be 1 more than the current version number.
        public var number: Int32?
        /// Message to be associated with the new version.
        public var message: String?

        public init(number: Int32? = nil, message: String? = nil) {
            self.number = number
            self.message = message
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.number = try values.decodeIfPresent(Int32.self, forKey: "number")
            self.message = try values.decodeIfPresent(String.self, forKey: "message")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(number, forKey: "number")
            try values.encodeIfPresent(message, forKey: "message")
        }
    }

    public init(key: String? = nil, value: AnyJSON? = nil, version: Version? = nil) {
        self.key = key
        self.value = value
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.key = try values.decodeIfPresent(String.self, forKey: "key")
        self.value = try values.decodeIfPresent(AnyJSON.self, forKey: "value")
        self.version = try values.decodeIfPresent(Version.self, forKey: "version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(key, forKey: "key")
        try values.encodeIfPresent(value, forKey: "value")
        try values.encodeIfPresent(version, forKey: "version")
    }
}
