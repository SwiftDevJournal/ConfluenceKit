// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct CreateFooterCommentModel: Codable {
    /// ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply.
    public var blogPostID: String?
    /// ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply.
    public var pageID: String?
    /// ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment.
    public var parentCommentID: String?
    /// ID of the attachment, if intending to create a comment against an attachment.
    public var attachmentID: String?
    /// ID of the custom content, if intending to create a comment against a custom content.
    public var customContentID: String?
    public var body: Body?

    public enum Body: Codable {
        case commentBodyWrite(CommentBodyWrite)
        case commentNestedBodyWrite(CommentNestedBodyWrite)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(CommentBodyWrite.self) {
                self = .commentBodyWrite(value)
            } else if let value = try? container.decode(CommentNestedBodyWrite.self) {
                self = .commentNestedBodyWrite(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (CommentBodyWrite, CommentNestedBodyWrite)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .commentBodyWrite(let value): try container.encode(value)
            case .commentNestedBodyWrite(let value): try container.encode(value)
            }
        }
    }

    public init(blogPostID: String? = nil, pageID: String? = nil, parentCommentID: String? = nil, attachmentID: String? = nil, customContentID: String? = nil, body: Body? = nil) {
        self.blogPostID = blogPostID
        self.pageID = pageID
        self.parentCommentID = parentCommentID
        self.attachmentID = attachmentID
        self.customContentID = customContentID
        self.body = body
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.blogPostID = try values.decodeIfPresent(String.self, forKey: "blogPostId")
        self.pageID = try values.decodeIfPresent(String.self, forKey: "pageId")
        self.parentCommentID = try values.decodeIfPresent(String.self, forKey: "parentCommentId")
        self.attachmentID = try values.decodeIfPresent(String.self, forKey: "attachmentId")
        self.customContentID = try values.decodeIfPresent(String.self, forKey: "customContentId")
        self.body = try values.decodeIfPresent(Body.self, forKey: "body")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(blogPostID, forKey: "blogPostId")
        try values.encodeIfPresent(pageID, forKey: "pageId")
        try values.encodeIfPresent(parentCommentID, forKey: "parentCommentId")
        try values.encodeIfPresent(attachmentID, forKey: "attachmentId")
        try values.encodeIfPresent(customContentID, forKey: "customContentId")
        try values.encodeIfPresent(body, forKey: "body")
    }
}
